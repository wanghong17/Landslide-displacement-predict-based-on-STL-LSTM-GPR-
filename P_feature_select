import pandas as pd
import matplotlib.pyplot as plt
import random
from sklearn import tree
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RandomizedSearchCV,train_test_split, GridSearchCV
from sklearn.svm import SVR
import numpy as np
from sklearn.metrics import mean_squared_error
from sklearn import preprocessing
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import mean_squared_error, mean_absolute_error
import matplotlib.colors as mcolors
from sklearn.model_selection import RandomizedSearchCV,train_test_split
from sklearn.svm import SVR


def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
    n_vars = 1 if type(data) is list else data.shape[1]
    df = DataFrame(data)
    cols, names = list(), list()
    # input sequence (t-n, ... t-1)
    # 将3组输入数据依次向下移动3，2，1行，将数据加入cols列表（技巧：(n_in, 0, -1)中的-1指倒序循环，步长为1）
    for i in range(n_in, 0, -1):
    	cols.append(df.shift(i))
    	names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
    # forecast sequence (t, t+1, ... t+n)
    # 将一组输出数据加入cols列表（技巧：其中i=0）
    for i in range(0, n_out):
    	cols.append(df.shift(-i))
    	if i == 0:
    		names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
    	else:
    		names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
    # cols列表(list)中现在有四块经过下移后的数据(即：df(-3),df(-2),df(-1),df)，将四块数据按列 并排合并
    agg = concat(cols, axis=1)
    # 给合并后的数据添加列名
    agg.columns = names
    print(agg)
    # 删除NaN值列
    if dropnan:
    	agg.dropna(inplace=True)
    return agg

dataset = read_csv('zg110p.csv', header=0, index_col=0)

values = dataset.values
ymax = values[:, 0].max()
ymin = values[:, 0].min()
print(ymax)
print(ymin)
n_hours = 1
n_features = 8
#标准化
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# # # 构造一个3->1的监督学习型数据
reframed = series_to_supervised(scaled, n_hours, 1)

#划分Training set and Testing set
values = reframed.values
n_obs = n_hours * n_features
X, y = values[:, :n_obs], values[:, -n_features]
X = pd.DataFrame(X)
indexName = ["X1", 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8']
X.columns = list(indexName)
train_y = y[:57]
y_test = y[57:]


##GA
iterations = 1000 # 迭代次数
pop_size = 100   # 种群大小，多少个染色体
pc = 0.03   # 交叉概率
pm = 0.01  # 变异概率
#
chrom_length = len(X.columns)   # 染色体长度




pop = []    # 种群
fitness_list = []   # 适应度
ratio_list = []     # 累计概率

# # 初始化种群
def geneEncoding():
    i = 0
    while i < pop_size:
        temp = []
        has_1 = False   # 这条染色体是否有1
        for j in range(chrom_length):
            rand = random.randint(0, 1)
            if rand == 1:
                has_1 = True
            temp.append(rand)
        if has_1:   # 染色体不能全0
            i += 1
            pop.append(temp)

#
# 计算适应度

def calFitness():
    fitness_list.clear()
    for i in range(pop_size):   # 计算种群中每条染色体的适应度
        X1 = X
        has_1 = False
        for j in range(chrom_length):
            if pop[i][j] == 0:
                del_index = X.columns[j]
                X1 = X1.drop(del_index, axis=1)
            else:
                has_1 = True
        X1 = X1.values

        if has_1:
            # svr = SVR(kernel='rbf', C=100.0, gamma=0.01, epsilon=.1)
            # svr = SVR(kernel='linear', C=1.0, gamma='auto')
            svr = SVR(kernel='poly', C=60, gamma='auto', degree=6, epsilon=.1,
                           coef0=1.0)
            svr.fit(X1[:57, :], train_y)
            y_predict = svr.predict(X1[57:, :])
            y_predict = y_predict*(ymax-ymin) + ymin
            test_y = y_test*(ymax-ymin) + ymin
            fitness = np.sqrt(mean_squared_error(y_predict, test_y))  # RMSE作为适应度
            print(fitness)
            fitness_list.append(fitness)
        else:
            fitness = 0     # 全0的适应度为0
            fitness_list.append(fitness)

# 计算适应度的总和
def sumFitness():
    total = 0
    for i in range(pop_size):
        total += fitness_list[i]
    return total
# 计算每条染色体的累计概率
def getRatio():
    ratio_list.clear()
    ratio_list.append(fitness_list[0])
    for i in range(1, pop_size):
        ratio_list.append(ratio_list[i-1] + fitness_list[i])
    ratio_list[-1] = 1

# 选择
def selection():
    global pop
    total_fitness = sumFitness()
    for i in range(pop_size):
        fitness_list[i] = fitness_list[i] / total_fitness
    getRatio()

    rand_ratio = [] # 随机概率
    for i in range(pop_size):
        rand_ratio.append(random.random())
    rand_ratio.sort()

    new_pop = []    # 新种群
    i = 0  # 已经处理的随机概率数
    j = 0  # 超出范围的染色体数

    while i < pop_size:
        if rand_ratio[i] < ratio_list[j]:   # 随机数在第j个染色体的概率范围内
            new_pop.append(pop[j])
            i += 1
        else:
            j += 1

    pop = new_pop
# 交叉
def crossover():
    for i in range(pop_size-1): # 若交叉，则染色体i与染色体i+1交叉
        if random.random() < pc:# 发生交叉
            cpoint = random.randint(0, chrom_length-1)    # 随机选择交叉点
            temp1 = []
            temp2 = []
            temp1.extend(pop[i][:cpoint])
            temp1.extend(pop[i+1][cpoint:])
            temp2.extend(pop[i+1][:cpoint])
            temp2.extend(pop[i][cpoint:])
            pop[i] = temp1
            pop[i+1] = temp2

# 变异
def mutation():
    for i in range(pop_size):
        if random.random() < pm: # 发生变异
            mpoint = random.randint(0, chrom_length-1)  # 随机选择变异点
            if pop[i][mpoint] == 1:
                pop[i][mpoint] = 0
            else:
                pop[i][mpoint] = 1

# 最优解
def getBest():
    best_chrom = pop[0]
    best_fitness = fitness_list[0]
    for i in range(1,pop_size):
        if fitness_list[i] < best_fitness:
            best_fitness = fitness_list[i]  # 最佳适应值
            best_chrom = pop[i] # 最佳染色体

    return best_chrom, best_fitness

if __name__=='__main__':

    plt.xlabel('iterations')
    plt.ylabel('best fitness')
    # plt.xlim((0,iterations))    # x坐标范围
    # plt.ylim((0,1)) # y坐标范围
    px = []
    py = []
    plt.ion()

    results = []
    geneEncoding() # 初始化种群
    for i in range(iterations):
        print(i)

        calFitness() # 计算种群中每条染色体适应度

        best_chrom, best_fitness = getBest()
        results.append([i, best_chrom, best_fitness])

        selection() # 选择
        crossover() # 交叉
        mutation()  # 变异

        print([i, best_chrom, best_fitness])

        px.append(i)    # 画图
        py.append(best_fitness)
        plt.plot(px, py)
        plt.show()
        plt.pause(0.001)
    results = pd.DataFrame(results)
    results.to_excel('resluts.xlsx')
