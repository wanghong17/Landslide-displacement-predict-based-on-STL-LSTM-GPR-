from math import sqrt
from numpy import concatenate
from matplotlib import pyplot
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.colors as mcolors
from sklearn.model_selection import RandomizedSearchCV,train_test_split
from sklearn.svm import SVR


def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
    n_vars = 1 if type(data) is list else data.shape[1]
    df = DataFrame(data)
    cols, names = list(), list()
    # input sequence (t-n, ... t-1)
    # 将3组输入数据依次向下移动3，2，1行，将数据加入cols列表（技巧：(n_in, 0, -1)中的-1指倒序循环，步长为1）
    for i in range(n_in, 0, -1):
    	cols.append(df.shift(i))
    	names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
    # forecast sequence (t, t+1, ... t+n)
    # 将一组输出数据加入cols列表（技巧：其中i=0）
    for i in range(0, n_out):
    	cols.append(df.shift(-i))
    	if i == 0:
    		names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
    	else:
    		names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
    # cols列表(list)中现在有四块经过下移后的数据(即：df(-3),df(-2),df(-1),df)，将四块数据按列 并排合并
    agg = concat(cols, axis=1)
    # 给合并后的数据添加列名
    agg.columns = names
    print(agg)
    # 删除NaN值列
    if dropnan:
    	agg.dropna(inplace=True)
    return agg

dataset = read_csv('zg110p.csv', header=0, index_col=0)

values = dataset.values
ymax = values[:, 0].max()
ymin = values[:, 0].min()
print(ymax)
print(ymin)
n_hours = 12
n_features = 1
#标准化
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# # # 构造一个3->1的监督学习型数据
reframed = series_to_supervised(scaled, n_hours, 1)

#划分Training set and Testing set
values = reframed.values
n_train_hours = 46
train = values[:n_train_hours, :]
test = values[n_train_hours:, :]
n_obs = n_hours * n_features
train_X, train_y = train[:, :n_obs], train[:, -n_features]
test_X, test_y = test[:, :n_obs], test[:, -n_features]
print(test_X.shape)
train_X = np.delete(train_X, [4,5,6,7,8,9,11], axis=1)
test_X = np.delete(test_X, [4,5,6,7,8,9,11], axis=1)


a = np.arange(0, len(test_y), 1)
#建立SVR模型kernel = ['poly', 'sigmoid', 'rbf']
kernel = ['poly', 'sigmoid', 'rbf' ]
c = [0.01, 0.1, 1, 10, 50, 100, 200, 500, 1000]
gamma = [0.001, 0.01, 0.1, 1, 5, 10, 50, 100]
epsilon = [0.001, 0.01, 0.1, 1, 5, 10, 50, 100]
shrinking = [True, False]
svm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}
svm = SVR()
svm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=1000, verbose=1)
#for confirmed
svm_search.fit(train_X, train_y)
svm_search.best_params_
svm_confirmed = svm_search.best_estimator_
y_pred_comfirmed = svm_confirmed.predict(test_X)

y_pred = y_pred_comfirmed*(ymax-ymin) + ymin
test_y = test_y*(ymax-ymin) + ymin
print('MAE:', mean_absolute_error(y_pred, test_y))
print('RMSE:', np.sqrt(mean_squared_error(y_pred, test_y)))
print('R2:', r2_score(y_pred, test_y))
print(y_pred)
print(test_y)

plt.plot(a, y_pred, marker = 'o')
plt.plot(a, test_y, marker = 's')
plt.show()
